/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { NapierRouter, NapierRouterInterface } from "../NapierRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "nPT",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minLpTokenOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidityFromUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ee8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80639839855314602d575b600080fd5b604360383660046070565b600095945050505050565b60405190815260200160405180910390f35b80356001600160a01b0381168114606b57600080fd5b919050565b600080600080600060a08688031215608757600080fd5b608e866055565b9450609a602087016055565b9497949650505050604083013592606081013592608090910135915056fea264697066735822122020056104822c28f67c4b0c87610646cebcb2959d52e4b3b473da049e4861222964736f6c634300080a0033";

type NapierRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NapierRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NapierRouter__factory extends ContractFactory {
  constructor(...args: NapierRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NapierRouter> {
    return super.deploy(overrides || {}) as Promise<NapierRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NapierRouter {
    return super.attach(address) as NapierRouter;
  }
  override connect(signer: Signer): NapierRouter__factory {
    return super.connect(signer) as NapierRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NapierRouterInterface {
    return new utils.Interface(_abi) as NapierRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NapierRouter {
    return new Contract(address, _abi, signerOrProvider) as NapierRouter;
  }
}
