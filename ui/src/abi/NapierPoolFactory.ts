/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface NapierPoolFactoryInterface extends utils.Interface {
  functions: {
    "POOL_CREATION_HASH()": FunctionFragment;
    "createPool(address,address)": FunctionFragment;
    "getData()": FunctionFragment;
    "governance()": FunctionFragment;
    "isRegisteredPool(address)": FunctionFragment;
    "poolFor(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "POOL_CREATION_HASH"
      | "createPool"
      | "getData"
      | "governance"
      | "isRegisteredPool"
      | "poolFor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "POOL_CREATION_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolFor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "POOL_CREATION_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolFor", data: BytesLike): Result;

  events: {
    "PoolCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
}

export interface PoolCreatedEventObject {
  underlying: string;
  tranche: string;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface NapierPoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NapierPoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    POOL_CREATION_HASH(overrides?: CallOverrides): Promise<[string]>;

    createPool(
      underlying: PromiseOrValue<string>,
      nPT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    isRegisteredPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolFor(
      underlying: PromiseOrValue<string>,
      npt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;
  };

  POOL_CREATION_HASH(overrides?: CallOverrides): Promise<string>;

  createPool(
    underlying: PromiseOrValue<string>,
    nPT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getData(
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, string, string]>;

  governance(overrides?: CallOverrides): Promise<string>;

  isRegisteredPool(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolFor(
    underlying: PromiseOrValue<string>,
    npt: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    POOL_CREATION_HASH(overrides?: CallOverrides): Promise<string>;

    createPool(
      underlying: PromiseOrValue<string>,
      nPT: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, string]>;

    governance(overrides?: CallOverrides): Promise<string>;

    isRegisteredPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolFor(
      underlying: PromiseOrValue<string>,
      npt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "PoolCreated(address,address)"(
      underlying?: PromiseOrValue<string> | null,
      tranche?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      underlying?: PromiseOrValue<string> | null,
      tranche?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;
  };

  estimateGas: {
    POOL_CREATION_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      underlying: PromiseOrValue<string>,
      nPT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getData(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFor(
      underlying: PromiseOrValue<string>,
      npt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POOL_CREATION_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPool(
      underlying: PromiseOrValue<string>,
      nPT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegisteredPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolFor(
      underlying: PromiseOrValue<string>,
      npt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
