/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_tranche",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tranche",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b506040516200106838038062001068833981016040819052620000349162000206565b8351849084906200004d90600390602085019062000093565b5080516200006390600490602084019062000093565b50505060ff82166080526200007a82600a620003bf565b60a0526001600160a01b031660c0525062000414915050565b828054620000a190620003d7565b90600052602060002090601f016020900481019282620000c5576000855562000110565b82601f10620000e057805160ff191683800117855562000110565b8280016001018555821562000110579182015b8281111562000110578251825591602001919060010190620000f3565b506200011e92915062000122565b5090565b5b808211156200011e576000815560010162000123565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200016157600080fd5b81516001600160401b03808211156200017e576200017e62000139565b604051601f8301601f19908116603f01168101908282118183101715620001a957620001a962000139565b81604052838152602092508683858801011115620001c657600080fd5b600091505b83821015620001ea5785820183015181830184015290820190620001cb565b83821115620001fc5760008385830101525b9695505050505050565b600080600080608085870312156200021d57600080fd5b84516001600160401b03808211156200023557600080fd5b62000243888389016200014f565b955060208701519150808211156200025a57600080fd5b5062000269878288016200014f565b935050604085015160ff811681146200028157600080fd5b60608601519092506001600160a01b03811681146200029f57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000301578160001904821115620002e557620002e5620002aa565b80851615620002f357918102915b93841c9390800290620002c5565b509250929050565b6000826200031a57506001620003b9565b816200032957506000620003b9565b81600181146200034257600281146200034d576200036d565b6001915050620003b9565b60ff841115620003615762000361620002aa565b50506001821b620003b9565b5060208310610133831016604e8410600b841016171562000392575081810a620003b9565b6200039e8383620002c0565b8060001904821115620003b557620003b5620002aa565b0290505b92915050565b6000620003d060ff84168362000309565b9392505050565b600181811c90821680620003ec57607f821691505b602082108114156200040e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051610c196200044f600039600081816101b30152818161036501526103ff015260005050600061015c0152610c196000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636ebc0af11161008c5780639dc29fac116100665780639dc29fac1461021e578063a457c2d714610231578063a9059cbb14610244578063dd62ed3e1461025757600080fd5b80636ebc0af1146101ae57806370a08231146101ed57806395d89b411461021657600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461018657806340c10f191461019957600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761026a565b6040516101049190610a56565b60405180910390f35b61012061011b366004610ac7565b6102fc565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610af1565b610314565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610104565b610120610194366004610ac7565b610338565b6101ac6101a7366004610ac7565b61035a565b005b6101d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610104565b6101346101fb366004610b2d565b6001600160a01b031660009081526020819052604090205490565b6100f76103e5565b6101ac61022c366004610ac7565b6103f4565b61012061023f366004610ac7565b610476565b610120610252366004610ac7565b6104f1565b610134610265366004610b4f565b6104ff565b60606003805461027990610b82565b80601f01602080910402602001604051908101604052809291908181526020018280546102a590610b82565b80156102f25780601f106102c7576101008083540402835291602001916102f2565b820191906000526020600020905b8154815290600101906020018083116102d557829003601f168201915b5050505050905090565b60003361030a81858561052a565b5060019392505050565b60003361032285828561064f565b61032d8585856106c9565b506001949350505050565b60003361030a81858561034b83836104ff565b6103559190610bbd565b61052a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103d75760405162461bcd60e51b815260206004820181905260248201527f546f6b656e3a4f6e6c79207472616e6368652063616e206d696e742f6275726e60448201526064015b60405180910390fd5b6103e1828261086d565b5050565b60606004805461027990610b82565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461046c5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e3a4f6e6c79207472616e6368652063616e206d696e742f6275726e60448201526064016103ce565b6103e1828261092c565b6000338161048482866104ff565b9050838110156104e45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103ce565b61032d828686840361052a565b60003361030a8185856106c9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661058c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103ce565b6001600160a01b0382166105ed5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103ce565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061065b84846104ff565b905060001981146106c357818110156106b65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103ce565b6106c3848484840361052a565b50505050565b6001600160a01b03831661072d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103ce565b6001600160a01b03821661078f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103ce565b6001600160a01b038316600090815260208190526040902054818110156108075760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103ce565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36106c3565b6001600160a01b0382166108c35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103ce565b80600260008282546108d59190610bbd565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03821661098c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103ce565b6001600160a01b03821660009081526020819052604090205481811015610a005760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103ce565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610642565b600060208083528351808285015260005b81811015610a8357858101830151858201604001528201610a67565b81811115610a95576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610ac257600080fd5b919050565b60008060408385031215610ada57600080fd5b610ae383610aab565b946020939093013593505050565b600080600060608486031215610b0657600080fd5b610b0f84610aab565b9250610b1d60208501610aab565b9150604084013590509250925092565b600060208284031215610b3f57600080fd5b610b4882610aab565b9392505050565b60008060408385031215610b6257600080fd5b610b6b83610aab565b9150610b7960208401610aab565b90509250929050565b600181811c90821680610b9657607f821691505b60208210811415610bb757634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610bde57634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122037d050425c8d97c62ac494d3e75d00148cfc0e97ca5c4be16408e5a206dae67c64736f6c634300080a0033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _tranche: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Token> {
    return super.deploy(
      _name,
      _symbol,
      _decimals,
      _tranche,
      overrides || {}
    ) as Promise<Token>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _tranche: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      _tranche,
      overrides || {}
    );
  }
  override attach(address: string): Token {
    return super.attach(address) as Token;
  }
  override connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
